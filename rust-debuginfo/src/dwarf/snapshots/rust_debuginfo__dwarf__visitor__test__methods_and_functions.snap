---
source: src/dwarf/visitor.rs
expression: "visitor.functions.join(\"\\n\")"
snapshot_kind: text
---
std::rt::lang_start::{closure#0}<()>
std::rt::lang_start<()>
std::hash::random::new
std::hash::random::{impl#5}::default
std::hash::random::{impl#5}::default
std::hash::random::{impl#0}::new::{closure#0}
std::hash::random::{impl#0}::new::KEYS::{constant#0}::{closure#1}
std::hash::random::{impl#0}::new::KEYS::__init
std::collections::hash::map::{impl#7}::default<alloc::string::String, i32, std::hash::random::RandomState>
std::collections::hash::map::{impl#7}::default<alloc::string::String, small::TestStruct0, std::hash::random::RandomState>
std::collections::hash::map::with_hasher<alloc::string::String, i32, std::hash::random::RandomState>
std::collections::hash::map::new<alloc::string::String, i32>
std::collections::hash::map::with_hasher<alloc::string::String, small::TestStruct0, std::hash::random::RandomState>
std::collections::hash::map::new<alloc::string::String, small::TestStruct0>
std::sys::process::unix::common::as_i32
std::sys::thread_local::native::lazy::initialize<core::cell::Cell<(u64, u64)>, !, fn() -> core::cell::Cell<(u64, u64)>>
std::sys::thread_local::native::lazy::get_or_init<core::cell::Cell<(u64, u64)>, !, fn() -> core::cell::Cell<(u64, u64)>>
std::sys::thread_local::native::lazy::{impl#0}::register_dtor<core::cell::Cell<(u64, u64)>>
std::sys::backtrace::__rust_begin_short_backtrace<fn(), ()>
std::process::to_i32
std::process::{impl#59}::report
std::thread::local::with<core::cell::Cell<(u64, u64)>, std::hash::random::{impl#0}::new::{closure_env#0}, std::hash::random::RandomState>
std::thread::local::try_with<core::cell::Cell<(u64, u64)>, std::hash::random::{impl#0}::new::{closure_env#0}, std::hash::random::RandomState>
core::ptr::unique::new_unchecked<u8>
core::ptr::non_null::without_provenance<u8>
core::ptr::non_null::as_ptr<u8>
core::ptr::non_null::new<u8>
core::ptr::non_null::new_unchecked<u8>
core::ptr::non_null::cast<u8, (alloc::string::String, i32)>
core::ptr::non_null::cast<u8, (alloc::string::String, small::TestStruct0)>
core::ptr::non_null::{impl#3}::new_unchecked::precondition_check
core::ptr::non_null::slice_from_raw_parts<u8>
core::ptr::non_null::new_unchecked<[u8]>
core::ptr::non_null::as_ptr<(alloc::string::String, i32)>
core::ptr::non_null::as_ptr<(alloc::string::String, small::TestStruct0)>
core::ptr::replace<std::sys::thread_local::native::lazy::State<core::cell::Cell<(u64, u64)>, !>>
core::ptr::mut_ptr::{impl#0}::replace<std::sys::thread_local::native::lazy::State<core::cell::Cell<(u64, u64)>, !>>
core::ptr::mut_ptr::{impl#0}::cast<u8, u8>
core::ptr::mut_ptr::{impl#0}::sub<(alloc::string::String, i32)>
core::ptr::mut_ptr::{impl#0}::drop_in_place<(alloc::string::String, i32)>
core::ptr::mut_ptr::{impl#0}::sub<(alloc::string::String, small::TestStruct0)>
core::ptr::mut_ptr::{impl#0}::drop_in_place<(alloc::string::String, small::TestStruct0)>
core::ptr::mut_ptr::{impl#0}::sub<u8>
core::ptr::mut_ptr::{impl#0}::sub<u8>
core::ptr::mut_ptr::{impl#0}::sub<(alloc::string::String, i32)>
core::ptr::mut_ptr::{impl#0}::sub<(alloc::string::String, small::TestStruct0)>
core::ptr::metadata::from_raw_parts<core::cell::Cell<(u64, u64)>, ()>
core::ptr::metadata::from_raw_parts_mut<[u8], u8>
core::ptr::null<core::cell::Cell<(u64, u64)>>
core::ptr::const_ptr::{impl#0}::as_ref<core::cell::Cell<(u64, u64)>>
core::ptr::const_ptr::{impl#0}::is_aligned_to<()>
core::ptr::const_ptr::{impl#0}::addr<()>
core::ptr::const_ptr::{impl#0}::is_null::runtime
core::ptr::const_ptr::{impl#0}::is_null<()>
core::ptr::const_ptr::{impl#0}::is_aligned_to<()>
core::ptr::const_ptr::{impl#0}::is_aligned_to<()>
core::ptr::const_ptr::{impl#0}::addr<()>
core::ptr::const_ptr::{impl#0}::copy_to_nonoverlapping<u8>
core::ptr::const_ptr::{impl#0}::align_offset<hashbrown::control::tag::Tag>
core::ptr::const_ptr::{impl#0}::add<u8>
core::ptr::const_ptr::{impl#0}::cast<u8, hashbrown::control::tag::Tag>
core::ptr::const_ptr::{impl#0}::align_offset<hashbrown::control::tag::Tag>
core::ptr::const_ptr::{impl#0}::add<u8>
core::ptr::const_ptr::{impl#0}::cast<u8, hashbrown::control::tag::Tag>
core::ptr::const_ptr::{impl#0}::align_offset<hashbrown::control::tag::Tag>
core::ptr::const_ptr::{impl#0}::add<u8>
core::ptr::const_ptr::{impl#0}::cast<u8, hashbrown::control::tag::Tag>
core::ptr::const_ptr::{impl#0}::align_offset<hashbrown::control::tag::Tag>
core::ptr::const_ptr::{impl#0}::add<u8>
core::ptr::const_ptr::{impl#0}::cast<u8, hashbrown::control::tag::Tag>
core::ptr::drop_in_place<hashbrown::raw::RawTable<(alloc::string::String, small::TestStruct0), alloc::alloc::Global>>
core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String, small::TestStruct0, std::hash::random::RandomState>>
core::ptr::drop_in_place<hashbrown::map::HashMap<alloc::string::String, i32, std::hash::random::RandomState, alloc::alloc::Global>>
core::ptr::drop_in_place<hashbrown::map::HashMap<alloc::string::String, small::TestStruct0, std::hash::random::RandomState, alloc::alloc::Global>>
core::ptr::read_volatile::precondition_check
core::ptr::read_unaligned<core::core_arch::arm_shared::neon::uint8x8_t>
core::ptr::drop_in_place<small::TestEnum0>
core::ptr::drop_in_place<small::TestStruct0>
core::ptr::drop_in_place<small::TestStruct1>
core::ptr::drop_in_place<small::TestStruct2>
core::ptr::drop_in_place<small::TestStruct3>
core::ptr::drop_in_place<small::TestStruct4>
core::ptr::drop_in_place<small::TestStruct5>
core::ptr::drop_in_place<small::TestStruct6>
core::ptr::drop_in_place<small::TestStruct7>
core::ptr::drop_in_place<small::TestStruct8>
core::ptr::drop_in_place<small::TestStruct9>
core::ptr::drop_in_place<alloc::string::String>
core::ptr::drop_in_place<alloc::vec::Vec<u8, alloc::alloc::Global>>
core::ptr::drop_in_place<alloc::raw_vec::RawVec<u8, alloc::alloc::Global>>
core::ptr::drop_in_place<(alloc::string::String, i32)>
core::ptr::drop_in_place<(alloc::string::String, small::TestStruct0)>
core::ptr::replace::precondition_check
core::ptr::drop_in_place<std::rt::lang_start::{closure_env#0}<()>>
core::ptr::drop_in_place<hashbrown::raw::RawTable<(alloc::string::String, i32), alloc::alloc::Global>>
core::ptr::drop_in_place<std::collections::hash::map::HashMap<alloc::string::String, i32, std::hash::random::RandomState>>
core::ptr::read_volatile<u8>
core::ptr::read_volatile<u8>
core::ptr::slice_from_raw_parts_mut<u8>
core::ptr::without_provenance<u8>
core::num::niche_types::new_unchecked
core::num::niche_types::as_inner
core::num::{impl#9}::wrapping_add
core::num::{impl#2}::overflowing_add
core::num::{impl#2}::overflowing_add_unsigned
core::num::{impl#2}::checked_add_unsigned
core::num::{impl#2}::wrapping_add
core::num::{impl#2}::wrapping_mul
core::num::{impl#11}::count_ones
core::num::{impl#11}::is_power_of_two
core::num::{impl#11}::count_ones
core::num::{impl#11}::is_power_of_two
core::num::{impl#11}::count_ones
core::num::{impl#11}::is_power_of_two
core::num::{impl#11}::overflowing_mul
core::num::{impl#11}::checked_mul
core::num::{impl#11}::abs_diff
core::num::{impl#11}::wrapping_sub
core::num::{impl#11}::overflowing_mul
core::num::{impl#11}::checked_mul
core::num::{impl#11}::checked_add
core::num::{impl#11}::is_power_of_two
core::num::{impl#11}::count_ones
core::num::{impl#11}::is_power_of_two
core::num::{impl#11}::count_ones
core::num::{impl#11}::is_power_of_two
core::num::{impl#11}::count_ones
core::num::{impl#11}::is_power_of_two
core::num::{impl#11}::count_ones
core::num::nonzero::new<u64>
core::num::nonzero::trailing_zeros
core::option::and_then<&mut core::option::Option<core::cell::Cell<(u64, u64)>>, core::cell::Cell<(u64, u64)>, fn(&mut core::option::Option<core::cell::Cell<(u64, u64)>>) -> core::option::Option<core::cell::Cell<(u64, u64)>>>
core::option::take<core::cell::Cell<(u64, u64)>>
core::option::unwrap_or_else<core::cell::Cell<(u64, u64)>, fn() -> core::cell::Cell<(u64, u64)>>
core::option::ok_or<&core::cell::Cell<(u64, u64)>, std::thread::local::AccessError>
core::option::unwrap_unchecked<i32>
core::option::ok_or<core::ptr::non_null::NonNull<u8>, core::alloc::AllocError>
core::option::{impl#40}::branch<usize>
core::option::{impl#40}::branch<usize>
core::option::{impl#40}::branch<usize>
core::option::{impl#41}::from_residual<(core::alloc::layout::Layout, usize)>
core::cell::get<(u64, u64)>
core::cell::replace<(u64, u64)>
core::cell::set<(u64, u64)>
core::cell::get<std::sys::thread_local::native::lazy::State<core::cell::Cell<(u64, u64)>, !>>
core::ops::function::FnOnce::call_once<fn(&mut core::option::Option<core::cell::Cell<(u64, u64)>>) -> core::option::Option<core::cell::Cell<(u64, u64)>>, (&mut core::option::Option<core::cell::Cell<(u64, u64)>>)>
core::ops::function::FnOnce::call_once<std::rt::lang_start::{closure_env#0}<()>, ()>
core::ops::function::FnOnce::call_once<fn(), ()>
core::ops::function::FnOnce::call_once<fn() -> core::cell::Cell<(u64, u64)>, ()>
core::ops::function::FnOnce::call_once<std::hash::random::{impl#0}::new::KEYS::{constant#0}::{closure_env#1}, (core::option::Option<&mut core::option::Option<core::cell::Cell<(u64, u64)>>>)>
core::ops::function::FnOnce::call_once<std::rt::lang_start::{closure_env#0}<()>, ()>
core::mem::replace<core::option::Option<core::cell::Cell<(u64, u64)>>>
core::mem::replace<std::sys::thread_local::native::lazy::State<core::cell::Cell<(u64, u64)>, !>>
core::mem::drop<std::sys::thread_local::native::lazy::State<core::cell::Cell<(u64, u64)>, !>>
core::mem::replace<(u64, u64)>
core::mem::size_of<core::core_arch::arm_shared::neon::uint8x8_t>
core::mem::manually_drop::into_inner<core::core_arch::arm_shared::neon::uint8x8_t>
core::hint::unreachable_unchecked
core::hint::black_box<()>
core::hint::unreachable_unchecked
core::hint::assert_unchecked::precondition_check
core::hint::unreachable_unchecked::precondition_check
core::hint::assert_unchecked
core::result::{impl#28}::from_residual<std::hash::random::RandomState, std::thread::local::AccessError, std::thread::local::AccessError>
core::result::{impl#28}::from_residual<core::ptr::non_null::NonNull<[u8]>, core::alloc::AllocError, core::alloc::AllocError>
core::result::{impl#27}::branch<&core::cell::Cell<(u64, u64)>, std::thread::local::AccessError>
core::result::{impl#27}::branch<core::ptr::non_null::NonNull<u8>, core::alloc::AllocError>
core::intrinsics::unlikely
core::intrinsics::copy_nonoverlapping::precondition_check
core::intrinsics::cold_path
core::intrinsics::copy_nonoverlapping<u8>
core::intrinsics::unlikely
core::intrinsics::copy_nonoverlapping<u8>
core::intrinsics::unlikely
core::iter::range::{impl#40}::forward_unchecked
core::iter::range::{impl#6}::next<i32>
core::iter::range::{impl#5}::spec_next<i32>
core::iter::traits::collect::{impl#0}::into_iter<core::ops::range::Range<i32>>
core::fmt::new_const<1>
core::fmt::new_v1<2, 1>
core::fmt::rt::new<u64>
core::fmt::rt::new_display<u64>
core::ub_checks::maybe_is_aligned_and_not_null::runtime
core::ub_checks::maybe_is_aligned_and_not_null::runtime
core::ub_checks::maybe_is_aligned_and_not_null::runtime
core::ub_checks::maybe_is_aligned_and_not_null
core::ub_checks::maybe_is_nonoverlapping
core::ub_checks::maybe_is_aligned_and_not_null
core::ub_checks::maybe_is_aligned_and_not_null
core::ub_checks::maybe_is_nonoverlapping::runtime
core::core_arch::arm_shared::neon::vget_lane_u64<0>
core::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8
core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8
core::core_arch::aarch64::neon::generated::vld1_u8
core::core_arch::aarch64::neon::generated::vcgez_s8
core::core_arch::simd::new
core::alloc::layout::{impl#0}::from_size_align_unchecked::precondition_check
core::alloc::layout::size
core::alloc::layout::align
core::alloc::layout::from_size_align_unchecked
core::alloc::layout::dangling
core::str::{impl#0}::as_bytes
core::slice::{impl#0}::as_ptr<u8>
core::cmp::impls::{impl#76}::lt
<unnamed>
alloc::string::from_utf8_unchecked
alloc::string::{impl#34}::to_string<str>
alloc::string::{impl#47}::from
alloc::string::{impl#111}::spec_to_string
alloc::vec::from_raw_parts_in<u8, alloc::alloc::Global>
alloc::vec::with_capacity_in<u8, alloc::alloc::Global>
alloc::vec::as_mut_ptr<u8, alloc::alloc::Global>
alloc::vec::set_len<u8, alloc::alloc::Global>
alloc::alloc::alloc_impl
alloc::alloc::alloc_zeroed
alloc::alloc::{impl#1}::allocate
alloc::alloc::{impl#1}::deallocate
alloc::alloc::exchange_malloc
alloc::alloc::alloc
alloc::alloc::dealloc
alloc::raw_vec::from_raw_parts_in<u8, alloc::alloc::Global>
alloc::raw_vec::with_capacity_in<u8, alloc::alloc::Global>
alloc::raw_vec::ptr<u8, alloc::alloc::Global>
alloc::raw_vec::from_raw_parts_in<alloc::alloc::Global>
alloc::raw_vec::needs_to_grow<alloc::alloc::Global>
alloc::raw_vec::capacity<alloc::alloc::Global>
alloc::raw_vec::with_capacity_in<alloc::alloc::Global>
alloc::raw_vec::non_null<alloc::alloc::Global, u8>
alloc::raw_vec::ptr<alloc::alloc::Global, u8>
alloc::raw_vec::new_cap<u8>
alloc::str::{impl#4}::to_owned
alloc::slice::{impl#0}::to_vec_in<u8, alloc::alloc::Global>
alloc::slice::{impl#0}::to_vec<u8>
alloc::slice::{impl#0}::into_vec<u8, alloc::alloc::Global>
alloc::slice::{impl#0}::to_vec_in::{impl#1}::to_vec<u8, alloc::alloc::Global>
alloc::slice::{impl#9}::to_owned<u8>
alloc::boxed::{impl#7}::into_raw_with_allocator<[u8], alloc::alloc::Global>
hashbrown::map::with_hasher<alloc::string::String, i32, std::hash::random::RandomState>
hashbrown::map::with_hasher<alloc::string::String, small::TestStruct0, std::hash::random::RandomState>
hashbrown::raw::new<(alloc::string::String, i32)>
hashbrown::raw::iter<(alloc::string::String, i32)>
hashbrown::raw::data_end<(alloc::string::String, i32)>
hashbrown::raw::buckets
hashbrown::raw::drop_elements<(alloc::string::String, i32)>
hashbrown::raw::iter<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::data_end<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::drop_elements<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::allocation_info
hashbrown::raw::free_buckets<alloc::alloc::Global>
hashbrown::raw::is_empty_singleton
hashbrown::raw::drop_inner_table<(alloc::string::String, i32), alloc::alloc::Global>
hashbrown::raw::drop_inner_table<(alloc::string::String, small::TestStruct0), alloc::alloc::Global>
hashbrown::raw::new<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::{impl#18}::drop<(alloc::string::String, i32), alloc::alloc::Global>
hashbrown::raw::{impl#18}::drop<(alloc::string::String, small::TestStruct0), alloc::alloc::Global>
hashbrown::raw::calculate_layout_for
hashbrown::raw::from_base_index<(alloc::string::String, i32)>
hashbrown::raw::as_ptr<(alloc::string::String, i32)>
hashbrown::raw::drop<(alloc::string::String, i32)>
hashbrown::raw::next_n<(alloc::string::String, i32)>
hashbrown::raw::new<(alloc::string::String, i32)>
hashbrown::raw::next_impl<(alloc::string::String, i32), false>
hashbrown::raw::{impl#29}::next<(alloc::string::String, i32)>
hashbrown::raw::{impl#29}::next<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::from_base_index<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::as_ptr<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::drop<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::next_n<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::new<(alloc::string::String, small::TestStruct0)>
hashbrown::raw::next_impl<(alloc::string::String, small::TestStruct0), false>
hashbrown::control::bitmask::lowest_set_bit
hashbrown::control::bitmask::nonzero_trailing_zeros
hashbrown::control::bitmask::remove_lowest_bit
hashbrown::control::bitmask::{impl#1}::into_iter
hashbrown::control::bitmask::{impl#1}::into_iter
hashbrown::control::bitmask::{impl#1}::into_iter
hashbrown::control::bitmask::{impl#1}::into_iter
hashbrown::control::bitmask::{impl#2}::next
hashbrown::control::bitmask::{impl#2}::next
hashbrown::control::group::neon::load_aligned
hashbrown::control::group::neon::match_full
hashbrown::util::invalid_mut<(alloc::string::String, i32)>
hashbrown::util::invalid_mut<(alloc::string::String, small::TestStruct0)>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
small::method_0
small::method_1
small::method_2
small::method_3
small::method_4
small::method_0
small::method_1
small::method_2
small::method_3
small::method_4
small::main
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
<unnamed>
